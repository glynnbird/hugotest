var searchContent =  [
  {
    "title": "Scaling Up and Down",
    "description": "Ramping up capacity to deal with peaks in traffic",
    "content": "\n\nIBM Cloudant Standard allows your database service's provisioned capacity to be altered dynamically to reflect changes in your application's demand. That is, you can allow your application to send more traffic to Cloudant by telling Cloudant ahead of time that you need extra capacity.\n\nThe simplest way to alter capacity is to manually adjust the slider left and right in the IBM Cloud dashboard, hitting the \"Update Capacity\" when you're happy:\n\n![capacity slider](/img/capacity-slider.png)\n\nThe slider allows a number \"blocks\" of capacity between 1 and 100 units to be selected. Small changes in capacity will be be provisioned in a matter of minutes - larger leaps may take longer.\n\n![schedule]({{< param \"image\" >}})\n> Photo by [Dylan McLeod on Unsplash](https://unsplash.com/photos/selective-focus-photography-of-mixing-console-Q81AduLKMMc)\n\n## Programmatically getting a Cloudant instance's capacity\n\nUsing the [Cloudant Node SDK](https://github.com/IBM/cloudant-node-sdk) we can write a simple script to fetch the current capacity of our Cloudant instance.\n\nWe create a new project with:\n\n```sh\nmkdir cloudant_capacity\ncd cloudant_capacity\nnpm init\n```\n\nthen install the SDK with:\n\n```sh\nnpm install --save @ibm-cloud/cloudant\n```\n\nThen create our `get_capacity.mjs` file:\n\n```js\nimport { CloudantV1 } from '@ibm-cloud/cloudant'\n\nconst service = CloudantV1.newInstance({})\n\nconst getCapacity = async () => {\n  const response = await service.getCapacityThroughputInformation()\n  return response.result\n}\n\nconst main = async () => {\n  // get the current capacity of a Cloudant instance\n  const capacity = await getCapacity()\n  console.log(capacity)\n}\n\nmain()\n```\n\nWe configure the script using environment variables as documented [here](https://github.com/IBM/cloudant-node-sdk?tab=readme-ov-file#authentication-with-environment-variables), depending which flavour of authentication that is to be used. We'll assume IAM authentication from now on.\n\nRunning this script should produce the output of this form:\n\n```sh\nexport CLOUDANT_URL=\"https://myinstance.cloudant.com\"\nexport CLOUDANT_APIKEY=\"MYAPIKEY\"\nnode get_capacity.mjs\n{ current: { throughput: { blocks: 1, query: 5, read: 100, write: 50 } } }\n```\n\n- this Cloudant instance is sized at 1 \"blocks\" - each block accounts for 5 queries, 50 writes and 100 read operations per second.\n- the current throughput is also listed in terms of the number reads/writes/queries per second that are allowed for this instance.\n- if the plan is currently being resized, the returned object will also contain a `target` object as well as a `current` object, indicating the size of the Cloudant plan that Cloudant will aim to achieve in due course. See the [API reference](https://cloud.ibm.com/apidocs/cloudant#getcapacitythroughputinformation) for more information.\n\n> Note if you are on a Cloudant Lite plan, then the `blocks` attribute will not be indicated. Lite plans cannot be programmatically modified - they must be first be converted to a billing-enabled Cloudant Standard plan.\n\n## Programmatically setting a Cloudant instance's capacity\n\nSetting the capacity of a Cloudant instance is as simple as informing Cloudant how many \"blocks\" that are to be provisioned. Each block equates to 5 queries, 50 writes and 100 read operations per second of added capacity, with the billing increasing linearly with each block.\n\nWe can copy our `get_capacity.mjs` script to `set_capacity.mjs` and extend it to allow the setting of target capacity:\n\n```js\nimport { CloudantV1 } from '@ibm-cloud/cloudant'\n\nconst service = CloudantV1.newInstance({})\n\nconst getCapacity = async () => {\n  const response = await service.getCapacityThroughputInformation()\n  return response.result\n}\n\nconst setCapacity = async (blocks) => {\n  const response = await service.putCapacityThroughputConfiguration({\n    blocks,\n  })\n  return response.result\n}\n\nconst main = async () => {\n  // set the capacity of a Cloudant instance to 2 blocks\n  const response = await setCapacity(2)\n  console.log('capacity change response', response)\n}\n\nmain()\n```\n\nThis will produce the output:\n\n```sh\nnode set_capacity.mjs\ncapacity change response {\n  current: { throughput: { blocks: 1, query: 5, read: 100, write: 50 } },\n  target: { throughput: { blocks: 2, query: 10, read: 200, write: 100 } }\n}\n```\n\nThe reponse shows that our plan is currently sized at 1 block but is targeted to expand to 2 blocks. This process may take a few minutes and shortly the `current` size should reach the target.\n\nIf the plan is being expanded by more than a handful of blocks, the plan may gradually expand to meet the target over a few minutes. The progress can be tracked by polling the [getCapacity](https://cloud.ibm.com/apidocs/cloudant?code=node#getcapacitythroughputinformation) API every minute or so until the target is reached.\n\n> Note: When using a Cloudant instance on the Lite plan, attempting to set the capacity will fail with a HTTP 400 response. First upgrade the instance to a Cloudant Standard plan.\n\n## Why would I want to do this?\n\nMany customers pick a plan size and leave it like that. A plan size is usually set such that it is just above the level of peak traffic that an application will typically send to Cloudant. If traffic occasionally spikes above the maximum, then the application may get some HTTP 429 responses, to indicate that the capacity limit has been exceed - these requests can be retried a little later.\n\nBut some customers have predictable, but non-constant traffic e.g.:\n\n- Busy in the day time, not much at night.\n- Busy during the week, not much over the weekend.\n- Busy during the holiday season, less so in the new year.\n\nBeing able to programmatically tweak the plan upwards or downwards can make sure your application has enough capacity to deal with the peaks and can save money by scaling back the plan size in the quiet times. It can be as simple as writing a one-line \"bash\" script to change the plan at different times:\n\n```sh\n#!/bin/bash\n\n# assumes the presence of COUCH_URL & IAM_API_KEY environment variables\n# Ref: https://cloud.ibm.com/apidocs/cloudant#putcapacitythroughputconfiguration\nccurl -X PUT -d '{\"blocks\": 2}' /_api/v2/user/capacity/throughput\n```\n\n> Note: the above script assumes the Node.js script [ccurl](https://www.npmjs.com/package/ccurl) is installed and environment variables are present to provide the URL and API key to be used to communicate with Cloudant.\n\n## Links\n\n- [Get Capacity Throughput API](https://cloud.ibm.com/apidocs/cloudant#getcapacitythroughputinformation)\n- [Update Capacity Throughput API](https://cloud.ibm.com/apidocs/cloudant#putcapacitythroughputconfiguration)\n",
    "url": "/2024/09/04/Scaling-Up-and-Down.html",
    "tags": "Scaling Capacity",
    "id": "1"
  }
]
